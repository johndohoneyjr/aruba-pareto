{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "sites_pareto_anywhere_name": {
            "defaultValue": "pareto-anywhere-test",
            "type": "string"
        },
        "iot_hub_name": {
            "defaultValue": "pareto-anywhere-iot-hub-test",
            "type": "string"
        },
        "namespaces_events_name": {
            "defaultValue": "pareto-anywhere-events-test",
            "type": "string"
        },
        "WebPubSub_name": {
            "defaultValue": "pareto-anywhere-wps-test",
            "type": "string"
        },
        "serverfarms_name": {
            "defaultValue": "ASP-paretoanywhereazure-b466-test",
            "type": "string"
        },
        "storageAccounts_name": {
            "defaultValue": "paretoanywherestoragetest",
            "type": "string"
        },
        "provisioningServices_name": {
            "defaultValue": "pareto-anywhere-provisioning-test",
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Devices/IotHubs",
            "apiVersion": "2022-04-30-preview",
            "name": "[parameters('iot_hub_name')]",
            "location": "canadaeast",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "identity": {
                "type": "None"
            },
            "properties": {
                "ipFilterRules": [],
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": 2
                    }
                },
                "routing": {
                    "endpoints": {
                        "serviceBusQueues": [],
                        "serviceBusTopics": [],
                        "eventHubs": [],
                        "storageContainers": [],
                        "cosmosDBSqlCollections": []
                    },
                    "routes": [
                        {
                            "name": "iot-hub-events",
                            "source": "DeviceMessages",
                            "condition": "true",
                            "endpointNames": [
                                "events"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "storageEndpoints": {},
                "messagingEndpoints": {
                    "fileNotifications": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "enableFileUploadNotifications": false,
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "RootCertificateV2",
                "disableLocalAuth": false,
                "allowedFqdnList": [],
                "enableDataResidency": false,
                "rootCertificate": {
                    "enableRootCertificateV2": true
                }
            }
        },
        {
            "type": "Microsoft.Devices/provisioningServices",
            "apiVersion": "2023-03-01-preview",
            "name": "[parameters('provisioningServices_name')]",
            "location": "canadaeast",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {
                "state": "Active",
                "provisioningState": "Succeeded",
                "iotHubs": [
                    {
                        "connectionString": "[concat('HostName=', parameters('iot_hub_name'), '.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=****')]",
                        "location": "canadaeast"
                    }
                ],
                "allocationPolicy": "Hashed",
                "portalOperationsHostName": "[concat(parameters('provisioningServices_name'), '.services.azure-devices-provisioning.net')]",
                "enableDataResidency": false
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2022-10-01-preview",
            "name": "[parameters('namespaces_events_name')]",
            "location": "Canada East",
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 1
            },
            "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "zoneRedundant": false,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0,
                "kafkaEnabled": false
            }
        },
        {
            "type": "Microsoft.SignalRService/WebPubSub",
            "apiVersion": "2023-06-01-preview",
            "name": "[parameters('WebPubSub_name')]",
            "location": "canadaeast",
            "sku": {
                "name": "Free_F1",
                "tier": "Free",
                "size": "F1",
                "capacity": 1
            },
            "kind": "SignalR",
            "properties": {
                "tls": {
                    "clientCertEnabled": false
                },
                "networkACLs": {
                    "defaultAction": "Deny",
                    "publicNetwork": {
                        "allow": [
                            "ServerConnection",
                            "ClientConnection",
                            "RESTAPI",
                            "Trace"
                        ]
                    },
                    "privateEndpoints": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "disableAadAuth": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-09-01",
            "name": "[parameters('storageAccounts_name')]",
            "location": "canadaeast",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2022-09-01",
            "name": "[parameters('serverfarms_name')]",
            "location": "Canada East",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "kind": "functionapp",
            "properties": {
                "perSiteScaling": false,
                "elasticScaleEnabled": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0,
                "zoneRedundant": false
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/authorizationrules",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(parameters('namespaces_events_name'), '/RootManageSharedAccessKey')]",
            "location": "canadaeast",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_events_name'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(parameters('namespaces_events_name'), '/pareto-anywhere-event-hub')]",
            "location": "canadaeast",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_events_name'))]"
            ],
            "properties": {
                "retentionDescription": {
                    "cleanupPolicy": "Delete",
                    "retentionTimeInHours": 1
                },
                "messageRetentionInDays": 1,
                "partitionCount": 2,
                "status": "Active"
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/networkrulesets",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(parameters('namespaces_events_name'), '/default')]",
            "location": "canadaeast",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_events_name'))]"
            ],
            "properties": {
                "publicNetworkAccess": "Enabled",
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": [],
                "trustedServiceAccessEnabled": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "allowPermanentDelete": false,
                    "enabled": true,
                    "days": 7
                },
                "isVersioningEnabled": false,
                "changeFeed": {
                    "enabled": false
                },
                "restorePolicy": {
                    "enabled": false
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "protocolSettings": {
                    "smb": {}
                },
                "cors": {
                    "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2022-09-01",
            "name": "[parameters('sites_pareto_anywhere_name')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_name'))]"
            ],
            "kind": "functionapp,linux",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(parameters('sites_pareto_anywhere_name'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(parameters('sites_pareto_anywhere_name'), '.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_name'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "vnetRouteAllEnabled": false,
                "vnetImagePullEnabled": false,
                "vnetContentShareEnabled": false,
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "linuxFxVersion": "Node|18",
                    "acrUseManagedIdentityCreds": false,
                    "alwaysOn": false,
                    "http20Enabled": false,
                    "functionAppScaleLimit": 200,
                    "minimumElasticInstanceCount": 0
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "clientCertMode": "Required",
                "hostNamesDisabled": false,
                "customDomainVerificationId": "3E906F57AD8A6541B54D97CB8519EE5108E328DBE041A047819E3F26116E6DD3",
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "redundancyMode": "None",
                "publicNetworkAccess": "Enabled",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/ftp')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "allow": true
            }
        },
        {
            "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/scm')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "allow": true
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/web')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "defaultDocuments": [
                    "Default.htm",
                    "Default.html",
                    "Default.asp",
                    "index.htm",
                    "index.html",
                    "iisstart.htm",
                    "default.aspx",
                    "index.php"
                ],
                "netFrameworkVersion": "v4.0",
                "linuxFxVersion": "Node|18",
                "requestTracingEnabled": false,
                "remoteDebuggingEnabled": false,
                "httpLoggingEnabled": false,
                "acrUseManagedIdentityCreds": false,
                "logsDirectorySizeLimit": 35,
                "detailedErrorLoggingEnabled": false,
                "publishingUsername": "$pareto-anywhere-test",
                "scmType": "None",
                "use32BitWorkerProcess": false,
                "webSocketsEnabled": false,
                "alwaysOn": false,
                "managedPipelineMode": "Integrated",
                "virtualApplications": [
                    {
                        "virtualPath": "/",
                        "physicalPath": "site\\wwwroot",
                        "preloadEnabled": false
                    }
                ],
                "loadBalancing": "LeastRequests",
                "experiments": {
                    "rampUpRules": []
                },
                "autoHealEnabled": false,
                "vnetRouteAllEnabled": false,
                "vnetPrivatePortsCount": 0,
                "publicNetworkAccess": "Enabled",
                "cors": {
                    "allowedOrigins": [
                        "https://portal.azure.com"
                    ],
                    "supportCredentials": false
                },
                "localMySqlEnabled": false,
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 2147483647,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 2147483647,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictionsUseMain": false,
                "http20Enabled": false,
                "minTlsVersion": "1.2",
                "scmMinTlsVersion": "1.2",
                "ftpsState": "FtpsOnly",
                "preWarmedInstanceCount": 0,
                "functionAppScaleLimit": 200,
                "functionsRuntimeScaleMonitoringEnabled": false,
                "minimumElasticInstanceCount": 0,
                "azureStorageAccounts": {}
            }
        },
        {
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/negotiateConnection')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "script_root_path_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/negotiateConnection/')]",
                "script_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/negotiateConnection/index.js')]",
                "config_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/negotiateConnection/function.json')]",
                "test_data_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/tmp/FunctionsData/negotiateConnection.dat')]",
                "href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/functions/negotiateConnection')]",
                "config": {},
                "invoke_url_template": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/app/wsconnection')]",
                "language": "node",
                "isDisabled": false
            }
        },
        {
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/processIoTHubMessages')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "script_root_path_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/processIoTHubMessages/')]",
                "script_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/processIoTHubMessages/index.js')]",
                "config_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/processIoTHubMessages/function.json')]",
                "test_data_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/tmp/FunctionsData/processIoTHubMessages.dat')]",
                "href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/functions/processIoTHubMessages')]",
                "config": {},
                "language": "node",
                "isDisabled": false
            }
        },
        {
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/serveWebApp')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "script_root_path_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/serveWebApp/')]",
                "script_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/serveWebApp/index.js')]",
                "config_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/home/site/wwwroot/serveWebApp/function.json')]",
                "test_data_href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/vfs/tmp/FunctionsData/serveWebApp.dat')]",
                "href": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/admin/functions/serveWebApp')]",
                "config": {},
                "invoke_url_template": "[concat('https://', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net/app/{folder?}/{filename?}",
                "language": "node",
                "isDisabled": false
            }
        },
        {
            "type": "Microsoft.Web/sites/hostNameBindings",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('sites_pareto_anywhere_name'), '/', parameters('sites_pareto_anywhere_name'), '.azurewebsites.net')]",
            "location": "Canada East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('sites_pareto_anywhere_name'))]"
            ],
            "properties": {
                "siteName": "pareto-anywhere-test",
                "hostNameType": "Verified"
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationrules",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(parameters('namespaces_events_name'), '/pareto-anywhere-test-event-hub/send')]",
            "location": "canadaeast",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaces_events_name'), 'pareto-anywhere-test-event-hub')]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_events_name'))]"
            ],
            "properties": {
                "rights": [
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2022-10-01-preview",
            "name": "[concat(parameters('namespaces_events_name'), '/pareto-anywhere-test-event-hub/$Default')]",
            "location": "canadaeast",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaces_events_name'), 'pareto-anywhere-test-event-hub')]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('namespaces_events_name'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/azure-webjobs-eventhub')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/azure-webjobs-hosts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/azure-webjobs-secrets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/deviceprofiles')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/function-releases')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/insights-logs-connections')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/insights-logs-devicetelemetry')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/scm-releases')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2022-09-01",
            "name": "[concat(parameters('storageAccounts_name'), '/default/pareto-anywhere-test83c0')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccounts_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_name'))]"
            ],
            "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
            }
        }
    ]
}